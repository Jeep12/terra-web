export type AnimationKey =
  | 'dying'
  | 'fallingDown'
  | 'hurt'
  | 'idle'
  | 'idleBlinking'
  | 'jumpLoop'
  | 'jumpStart'
  | 'kicking'
  | 'runSlashing'
  | 'runThrowing'
  | 'running'
  | 'slashing'
  | 'slashingInTheAir'
  | 'sliding'
  | 'throwing'
  | 'throwingInTheAir'
  | 'walking';

export interface AnimationData {
  folder: string;
  frames: number;
}

export type CharacterState = 'idle' | 'moving' | 'jumping' | 'falling' | 'dying' | 'custom';

export interface BotPosition {
  x: number;
  y: number;
}

export interface BotPhysics {
  velocity: number;
  jumpVelocity: number;
  fallSpeed: number;
  isJumping: boolean;
  isFalling: boolean;
  groundY: number;
}

export interface DragState {
  isDragging: boolean;
  isMouseDown: boolean;
  mouseDownTime: number;
  startMouseX: number;
  startMouseY: number;
  startElementX: number;
  startElementY: number;
  dragOffsetX: number;
  dragOffsetY: number;
  dragDistance: number;
  selecting: boolean;
  clickFired: boolean;
  selectionEffect: boolean;
}

export const BOT_CONFIG = {
  // ===== CONFIGURACI√ìN DE ANIMACI√ìN =====
  assetBasePath: 'https://assets.l2terra.online/sprites/Skeleton_Crusader_3/PNG/PNG%20Sequences/',
  defaultFrameRate: 12,               // FPS bajo para animaci√≥n m√°s lenta y natural

  // ===== CONFIGURACI√ìN DE CARGA DE IM√ÅGENES =====

  

  enableProgressiveLoading: true,
  enableLazyLoading: true,
  loadingBatchSize: 3,
  loadingDelay: 50,

  // ===== CONFIGURACI√ìN DE MOVIMIENTO =====
  movementSpeed: 0.15,                // Muy baja para movimientos lentos

  // ===== CONFIGURACI√ìN DE F√çSICA =====
  gravity: 3,                    // Gravedad m√°s suave
  maxFallSpeed: 3,               // Velocidad m√°xima m√°s suave
  jumpPower: 7,                     // Salto m√°s suave y bajo

  // ===== CONFIGURACI√ìN DE DRAG & DROP =====
  dragHoldMs: 150,
  dragThreshold: 5,

  // ===== CONFIGURACI√ìN DE AUTO-WALK =====
  minAutoWalkDistance: 80,

  // ===== CONFIGURACI√ìN DE DI√ÅLOGOS =====
  dialogDuration: 3000,
  dialogFadeTime: 500,

  // ===== CONFIGURACI√ìN DE EFECTOS VISUALES =====
  selectionGlowColor: '#FFD700',
  selectionGlowIntensity: 15,
  dragScale: 1.1,
  dragShadow: '0 10px 20px rgba(0, 0, 0, 0.4)',

  // ===== CONFIGURACI√ìN DE POSICIONAMIENTO =====
  initialX: 350,
  initialY: 0,  // Posici√≥n inicial m√°s alta para que pueda caer
  spriteWidth: 100,
  spriteHeight: 100,

  // ===== CONFIGURACI√ìN DE COMPORTAMIENTO =====
  enableAutoWalk: true,
  enableAutoBlink: true,
  enableRandomDialog: true,
  enableDragAndDrop: true,
  enableClick: true,
  useSimpleDrag: true,
  enableJump: true,

  // ===== CONFIGURACI√ìN DE TIMING =====
  autoWalkInterval: 6000,            // M√°s lento el auto walk
  autoBlinkInterval: 4000,
  randomDialogInterval: 6000,
  blinkDuration: 900,

  // ===== CONFIGURACI√ìN DE DI√ÅLOGOS =====
  defaultDialog: "Hello, I'm the Skeleton Crusader!",
  dialogMessages: [
    // English
    'Our Terra server is temporarily on pause.',
    'Development is paused while we focus on studies.',
    'For updates, join our Discord community.',
    'We‚Äôll be back stronger soon!',
    'Thanks for your support!',
  
    // Espa√±ol
    'Nuestro servidor Terra est√° en pausa temporal.',
    'Pausamos el desarrollo por temas de estudio.',
    'Unite a nuestro Discord para m√°s novedades.',
    '¬°Volveremos con todo pronto!',
    '¬°Gracias por el aguante!'
  ],

  // ===== CONFIGURACI√ìN DE ANIMACIONES =====
  animations: {
    dying: { folder: 'Dying', frames: 15 },
    fallingDown: { folder: 'Falling Down', frames: 6 },
    hurt: { folder: 'Hurt', frames: 12 },
    idle: { folder: 'Idle', frames: 18 },
    idleBlinking: { folder: 'Idle Blinking', frames: 18 },
    jumpLoop: { folder: 'Jump Loop', frames: 6 },
    jumpStart: { folder: 'Jump Start', frames: 6 },
    kicking: { folder: 'Kicking', frames: 12 },
    runSlashing: { folder: 'Run Slashing', frames: 12 },
    runThrowing: { folder: 'Run Throwing', frames: 12 },
    running: { folder: 'Running', frames: 12 },
    slashing: { folder: 'Slashing', frames: 12 },
    slashingInTheAir: { folder: 'Slashing in The Air', frames: 12 },
    sliding: { folder: 'Sliding', frames: 6 },
    throwing: { folder: 'Throwing', frames: 12 },
    throwingInTheAir: { folder: 'Throwing in The Air', frames: 12 },
    walking: { folder: 'Walking', frames: 24 }
  } as Record<AnimationKey, AnimationData>
} as const;

export const ANIMATION_PRIORITIES = {
  high: ['walking', 'running', 'jumpStart', 'jumpLoop', 'kicking'] as AnimationKey[],
  medium: ['hurt', 'slashing', 'throwing', 'idleBlinking'] as AnimationKey[],
  low: ['dying', 'fallingDown', 'runSlashing', 'runThrowing', 'slashingInTheAir',
    'sliding', 'throwingInTheAir'] as AnimationKey[]
} as const;

// ===== CONFIGURACI√ìN DE DEBUG =====
export const DEBUG_CONFIG = {
  enableLogs: false,              // ‚Üê Desactiva TODOS los logs
  enablePhysicsLogs: false,       // ‚Üê Logs de ca√≠da, salto, movimiento
  enableAnimationLogs: false,     // ‚Üê Logs de cambios de animaci√≥n
  enableDragLogs: false,          // ‚Üê Logs de arrastrar y soltar
  enableDialogLogs: false,        // ‚Üê Logs de di√°logos del bot
  enableLoadingLogs: false        // ‚Üê Logs de carga de im√°genes
} as const;

// ===== FUNCI√ìN DE LOGGING =====
export const debugLog = {
  physics: (message: string, ...args: any[]) => {
    if (DEBUG_CONFIG.enableLogs && DEBUG_CONFIG.enablePhysicsLogs) {
      console.log(`üìâ [PHYSICS] ${message}`, ...args);
    }
  },
  animation: (message: string, ...args: any[]) => {
    if (DEBUG_CONFIG.enableLogs && DEBUG_CONFIG.enableAnimationLogs) {
      console.log(`üéÆ [ANIMATION] ${message}`, ...args);
    }
  },
  drag: (message: string, ...args: any[]) => {
    if (DEBUG_CONFIG.enableLogs && DEBUG_CONFIG.enableDragLogs) {
      console.log(`üéØ [DRAG] ${message}`, ...args);
    }
  },
  dialog: (message: string, ...args: any[]) => {
    if (DEBUG_CONFIG.enableLogs && DEBUG_CONFIG.enableDialogLogs) {
      console.log(`üí¨ [DIALOG] ${message}`, ...args);
    }
  },
  loading: (message: string, ...args: any[]) => {
    if (DEBUG_CONFIG.enableLogs && DEBUG_CONFIG.enableLoadingLogs) {
      console.log(`üì¶ [LOADING] ${message}`, ...args);
    }
  },
  error: (message: string, ...args: any[]) => {
    console.error(`‚ùå [ERROR] ${message}`, ...args);
  },
  warn: (message: string, ...args: any[]) => {
    console.warn(`‚ö†Ô∏è [WARN] ${message}`, ...args);
  }
};
