import{a as i}from"./chunk-MX7NQEN5.js";import{e as v}from"./chunk-2LL2IYUS.js";import{C as m}from"./chunk-FEPRFNA5.js";import{B as d,C as o,F as l,O as s,R as f,W as g,k as c,o as a,p as n,t as p}from"./chunk-RQKQ5XMY.js";var b=class h{constructor(e,t){this.http=e;this.router=t}loggedIn=!1;email;isRefreshing=!1;refreshTokenSubject=new c(null);userDataSubject=new c(null);isCheckingAuth=!1;login(e){return this.http.post(`${i.apiUrl}api/auth/login`,e,{withCredentials:!0,observe:"response"}).pipe(s(t=>{console.log("\u2705 [LOGIN SUCCESS] Usuario autenticado:",e.email),this.setEmail(e.email),this.loggedIn=!0,this.userDataSubject.next(null)}),o(t=>(console.error("\u274C [LOGIN ERROR] Error:",t.status,t.message),n(()=>t))))}register(e){return this.http.post(`${i.apiUrl}api/auth/register`,e)}logout(){return this.http.post(`${i.apiUrl}api/auth/logout`,{},{withCredentials:!0}).pipe(s(()=>{this.loggedIn=!1,this.email=null,this.userDataSubject.next(null),this.router.navigate(["/login"])}))}refreshToken(){return this.isRefreshing?this.refreshTokenSubject.pipe(d(e=>e!==null),l(1)):(this.isRefreshing=!0,this.refreshTokenSubject.next(null),this.http.post(`${i.apiUrl}api/auth/refresh`,{},{withCredentials:!0}).pipe(l(1),s(e=>{console.log("\u{1F504} [REFRESH SUCCESS] Token renovado exitosamente"),this.isRefreshing=!1,this.refreshTokenSubject.next(e)}),o(e=>(console.error("\u274C [REFRESH ERROR] Error:",e.status,e.message),this.isRefreshing=!1,this.refreshTokenSubject.next(null),(e.status===401||e.status===403)&&(this.loggedIn=!1,this.userDataSubject.next(null)),n(()=>e)))))}get isRefreshingToken(){return this.isRefreshing}get refreshTokenSubject$(){return this.refreshTokenSubject.asObservable()}get isAuthenticated(){return this.loggedIn}recoveryPassword(e){return this.http.post(`${i.apiUrl}api/auth/resend-reset-email?email=${encodeURIComponent(e)}`,{})}resetPassword(e,t){return this.http.post(`${i.apiUrl}api/auth/reset-password?token=${encodeURIComponent(e)}`,{password:t},{withCredentials:!0})}getCurrentUser(){let e=this.userDataSubject.value;return e?a(e):this.http.get(`${i.apiUrl}api/auth/me`,{withCredentials:!0}).pipe(l(1),s(t=>{console.log("\u2705 [AUTH SUCCESS] Usuario obtenido exitosamente:",t.email),this.userDataSubject.next(t)}),o(t=>{if(console.error("\u274C [AUTH ERROR] Error:",t.status,t.message),t.error?.code==="2FA_REQUIRED_UNTRUSTED_DEVICE"){let r=this.getEmail();console.log("\u{1F50D} [AUTH] Redirigiendo a 2FA con email:",r),this.router.navigate(["/two-factor-step"],{queryParams:{email:r}})}else if(t.error?.code==="2FA_REQUIRED_NO_DEVICE"){let r=this.getEmail();console.log("\u{1F50D} [AUTH] Redirigiendo a 2FA con email:",r),this.router.navigate(["/two-factor-step"],{queryParams:{email:r}})}else(t.status===401||t.status===403)&&this.userDataSubject.next(null);return n(()=>t)}))}isLoggedIn(){return console.log("\u{1F50D} [AUTH] isLoggedIn() llamado"),console.log("\u{1F50D} [AUTH] isCheckingAuth:",this.isCheckingAuth),console.log("\u{1F50D} [AUTH] loggedIn local:",this.loggedIn),this.isCheckingAuth?(console.log("\u{1F50D} [AUTH] Ya est\xE1 verificando, devolviendo estado local:",this.loggedIn),a(this.loggedIn)):this.loggedIn?(console.log("\u{1F50D} [AUTH] Ya autenticado localmente, devolviendo true"),a(!0)):(console.log("\u{1F50D} [AUTH] Iniciando verificaci\xF3n de autenticaci\xF3n"),this.isCheckingAuth=!0,this.getCurrentUser().pipe(l(1),s(()=>{console.log("\u{1F50D} [AUTH] Verificaci\xF3n exitosa, estableciendo loggedIn = true"),this.loggedIn=!0,this.isCheckingAuth=!1}),p(()=>!0),o(e=>(console.error("\u{1F50D} [AUTH] Error en isLoggedIn:",e),this.isCheckingAuth=!1,this.loggedIn=!1,e.status===401||e.status===403?(console.log("\u{1F50D} [AUTH] Error 401/403, devolviendo false"),a(!1)):(console.log("\u{1F50D} [AUTH] Otro error, devolviendo false"),a(!1))))))}clearUserCache(){this.userDataSubject.next(null)}updateAuthState(e){this.loggedIn=e,e||this.userDataSubject.next(null)}resendVerificationEmail(e){return this.http.post(`${i.apiUrl}api/auth/resend-verification`,{email:e})}verifyEmail(e){return this.http.get(`${i.apiUrl}api/auth/verify-email?token=${encodeURIComponent(e)}`)}recentActivity(){return this.http.get(`${i.apiUrl}api/auth/recent-activity`,{withCredentials:!0})}request2FACode(e){console.log("\u{1F50D} [2FA SERVICE] Solicitando c\xF3digo 2FA para:",e);let t=e?{email:e}:{};return this.http.post(`${i.apiUrl}api/auth/request-2fa-code`,t).pipe(s(r=>{console.log("\u{1F50D} [2FA SERVICE] Respuesta exitosa de request2FACode:",r)}),o(r=>(console.error("\u{1F50D} [2FA SERVICE] Error en request2FACode:",r),n(()=>r))))}verify2FACode(e,t){console.log("\u{1F4E7} Email a verificar:",t),console.log("\u{1F510} C\xF3digo a verificar:",e);let r={emailRequest:{email:t},code:e};return this.http.post(`${i.apiUrl}api/auth/verify-2fa-code`,r).pipe(s(u=>{console.log("\u2705 C\xF3digo 2FA verificado con \xE9xito:",u)}),o(u=>(console.error("\u274C Error al verificar c\xF3digo 2FA:",u),n(()=>u))))}toggle2FA(e){return this.http.post(`${i.apiUrl}api/auth/2fa/toggle`,{enabled:e},{withCredentials:!0})}setEmail(e){this.email=e}getEmail(){return this.email}getTrustedDevices(){return this.http.get(`${i.apiUrl}api/auth/trusted-devices`,{withCredentials:!0})}removeTrustedDevice(e){return this.http.post(`${i.apiUrl}api/auth/remove-trusted-device`,{deviceId:e})}static \u0275fac=function(t){return new(t||h)(g(m),g(v))};static \u0275prov=f({token:h,factory:h.\u0275fac,providedIn:"root"})};export{b as a};
